package com.example.medicare.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.medicare.exception.CustomerAlreadyExistsException;
import com.example.medicare.exception.CustomerNotFoundExpection;
import com.example.medicare.exception.LoginException;
import com.example.medicare.model.Customer;
import com.example.medicare.service.CustomerService;

import jakarta.validation.Valid;

@RestController
@Validated
public class CustomerController {
	@Autowired
	private CustomerService service;
	
//	@PostMapping(value="/customer")
//	public void addCustomer(Customer cust) {
//		service.addCustomer(cust);
//	}
	
	@PostMapping(value="/customer")
	public ResponseEntity<Customer> addCustomer(@Valid @RequestBody Customer cust)throws Exception{
		String tempEmail = cust.getEmail();
		if(tempEmail != null && !"".equals(tempEmail)) {
			Customer custTemp = service.getByEmail(tempEmail);
			if(custTemp != null) {
				throw new CustomerAlreadyExistsException();
			}
		}
		Customer custTemp = null;
		custTemp = service.addCustomer(cust);
		return new ResponseEntity<Customer>(cust,HttpStatus.CREATED);
	}
	
	@GetMapping(value = "/customer/name/{name}")
	public ResponseEntity<Customer> getByName(@PathVariable String name) throws Exception{
		Customer cust = null;
		cust.getName();
		return new ResponseEntity<Customer>(cust,HttpStatus.FOUND);
	}
	
	@GetMapping(value = "/customer/email/{email}")
	public ResponseEntity<Customer> getByEmail(@PathVariable("email") String email) throws Exception{
		Customer custTemp = service.getByEmail(email);
		if(custTemp == null) {
			throw new CustomerNotFoundExpection();
		}
		return new ResponseEntity<Customer>(custTemp,HttpStatus.FOUND);
	}
	
	
	@PostMapping(value = "/login")
	public ResponseEntity<Customer> getByEmailAndPassWord(@Valid @RequestBody Customer cust) throws Exception{
		String email = cust.getEmail();
		String password = cust.getPassword();
		Customer custTemp = null;
		if(email != null && password != null) {
			custTemp = service.getByEmailAndPassword(email, password);
		}
		if(custTemp == null) {
			throw new LoginException();
		}
		return new ResponseEntity<Customer>(custTemp,HttpStatus.FOUND);
	}
}
